{"version":3,"sources":["support/utils.js","components/Peg.js","components/keyPegs.js","components/App.js","index.js"],"names":["colors","generateRandom","Math","floor","random","length","Peg","currentRow","rowIndex","pegIndex","handlePegColor","colorsSet","colorIndex","className","onClick","newColorIndex","KeyPegs","keyPegColorIndex","App","generateCodeToCrack","Array","fill","undefined","map","useState","chances","setCurrentRow","currentPegSelection","setCurrentPegSelection","codeToCrack","setCodeToCrack","setKeyPegColorIndex","pegColors","setPegColors","resetGame","submittedForRow","JSON","stringify","alert","newRowIndex","keyPegs","alreadyMatched","index","push","checkDirectMatch","includes","matchedFiltered","filter","val","codeFiltered","checkCloseMatch","calculateKeyPegs","updatedKeyPegs","updatedPegSelection","updatedPegColors","_val","some","a","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42bd636f.chunk.js","sourcesContent":["export const colors = [\n  null,\n  \"bg-red-500\",\n  \"bg-green-500\",\n  \"bg-yellow-500\",\n  \"bg-orange-500\",\n  \"bg-black\",\n  \"bg-white\",\n];\n\nexport const generateRandom = () =>\n  Math.floor(Math.random() * (colors.length - 1) + 1);\n","import { colors } from \"../support/utils\";\n\nconst Peg = ({ currentRow, rowIndex, pegIndex, handlePegColor, colorsSet }) => {\n  const colorIndex = colorsSet ? colorsSet[pegIndex] : 0;\n  return (\n    <div\n      className={`border mx-2 border-black rounded-full ${colors[colorIndex]} sm:h-12 sm:w-12 h-10 w-10`}\n      onClick={() => {\n        if (currentRow !== rowIndex) {\n          return;\n        }\n        let newColorIndex = colorIndex + 1;\n        if (newColorIndex > colors.length - 1) {\n          newColorIndex = 1;\n        }\n        handlePegColor(pegIndex, newColorIndex);\n      }}\n    ></div>\n  );\n};\n\nexport default Peg;\n","const KeyPegs = ({ keyPegColorIndex }) => {\n  /*\n    for no correct colors: 0 \"null\"\n    for a correct color but in wrong position: 1 \"bg-black\"\n    for a correct color in correct position: 2 \"bg-green-500\"\n  */\n  const colors = [null, \"bg-black\", \"bg-green-500\"];\n\n  return (\n    <div className=\"border rounded border-black p-2 mr-2\">\n      <div className=\"flex\">\n        <div\n          className={`border border-black rounded-full h-2 w-2 ${\n            colors[keyPegColorIndex ? keyPegColorIndex[0] : null]\n          }`}\n        ></div>\n        <div\n          className={`border border-black rounded-full h-2 w-2 ${\n            colors[keyPegColorIndex ? keyPegColorIndex[1] : null]\n          }`}\n        ></div>\n      </div>\n      <div className=\"flex\">\n        <div\n          className={`border border-black rounded-full h-2 w-2 ${\n            colors[keyPegColorIndex ? keyPegColorIndex[2] : null]\n          }`}\n        ></div>\n        <div\n          className={`border border-black rounded-full h-2 w-2 ${\n            colors[keyPegColorIndex ? keyPegColorIndex[3] : null]\n          }`}\n        ></div>\n      </div>\n    </div>\n  );\n};\n\nexport default KeyPegs;\n","import { useState } from \"react\";\nimport { generateRandom } from \"../support/utils\";\nimport Peg from \"./Peg\";\nimport KeyPegs from \"./keyPegs\";\n\nconst App = () => {\n  const generateCodeToCrack = () =>\n    new Array(4).fill(undefined).map(generateRandom);\n\n  const calculateKeyPegs = () => {\n    const keyPegs = [];\n    const alreadyMatched = [];\n\n    const checkDirectMatch = () => {\n      for (let index = 0; index < currentPegSelection.length; index++) {\n        if (codeToCrack[index] === currentPegSelection[index]) {\n          keyPegs[index] = 2;\n          alreadyMatched.push(currentPegSelection[index]);\n          continue;\n        }\n        keyPegs[index] = 0;\n      }\n    };\n\n    const checkCloseMatch = () => {\n      for (let index = 0; index < currentPegSelection.length; index++) {\n        if (codeToCrack.includes(currentPegSelection[index])) {\n          const matchedFiltered = alreadyMatched.filter(\n            (val) => val === currentPegSelection[index]\n          );\n          const codeFiltered = codeToCrack.filter(\n            (val) => val === currentPegSelection[index]\n          );\n          if (matchedFiltered.length < codeFiltered.length) {\n            keyPegs[index] = 1;\n            alreadyMatched.push(currentPegSelection[index]);\n          }\n          continue;\n        }\n      }\n    };\n\n    checkDirectMatch();\n    checkCloseMatch();\n    return keyPegs;\n  };\n\n  const chances = 10;\n  const [currentRow, setCurrentRow] = useState(chances - 1);\n  const [currentPegSelection, setCurrentPegSelection] = useState([0, 0, 0, 0]);\n  const [codeToCrack, setCodeToCrack] = useState(generateCodeToCrack());\n  const [keyPegColorIndex, setKeyPegColorIndex] = useState([]);\n  const [pegColors, setPegColors] = useState([]);\n\n  const resetGame = () => {\n    setCurrentPegSelection([0, 0, 0, 0]);\n    setCodeToCrack(generateCodeToCrack());\n    setCurrentRow(chances - 1);\n    setKeyPegColorIndex([]);\n    setPegColors([]);\n  };\n\n  const submittedForRow = () => {\n    if (JSON.stringify(codeToCrack) === JSON.stringify(currentPegSelection)) {\n      alert(\"Game End! You Cracked the code!\");\n      resetGame();\n      return;\n    }\n    if (currentRow === 0) {\n      alert(\"No luck - Game End!\");\n      resetGame();\n      return;\n    }\n\n    const newRowIndex = currentRow - 1;\n    alert(\"No luck, try again\");\n    const keyPegs = calculateKeyPegs();\n    const updatedKeyPegs = [...keyPegColorIndex];\n    updatedKeyPegs.push(keyPegs);\n    setKeyPegColorIndex(updatedKeyPegs);\n    setCurrentPegSelection([0, 0, 0, 0]);\n    setCurrentRow(newRowIndex);\n  };\n\n  const handlePegColor = (pegIndex, colorIndex) => {\n    const updatedPegSelection = [...currentPegSelection];\n    const updatedPegColors = [...pegColors];\n    updatedPegSelection[pegIndex] = colorIndex;\n    updatedPegColors[currentRow] = updatedPegSelection;\n    setCurrentPegSelection(updatedPegSelection);\n    setPegColors(updatedPegColors);\n  };\n\n  const renderBoard = () =>\n    new Array(chances).fill(undefined).map((_val, index) => (\n      <div key={index} className=\"flex p-2 items-center justify-center\">\n        <KeyPegs keyPegColorIndex={keyPegColorIndex[chances - 1 - index]} />\n        <div className=\"flex justify-center\">\n          <Peg\n            pegIndex={0}\n            currentRow={currentRow}\n            rowIndex={index}\n            handlePegColor={handlePegColor}\n            colorsSet={pegColors[index]}\n          />\n          <Peg\n            pegIndex={1}\n            currentRow={currentRow}\n            rowIndex={index}\n            handlePegColor={handlePegColor}\n            colorsSet={pegColors[index]}\n          />\n          <Peg\n            pegIndex={2}\n            currentRow={currentRow}\n            rowIndex={index}\n            handlePegColor={handlePegColor}\n            colorsSet={pegColors[index]}\n          />\n          <Peg\n            pegIndex={3}\n            currentRow={currentRow}\n            rowIndex={index}\n            handlePegColor={handlePegColor}\n            colorsSet={pegColors[index]}\n          />\n        </div>\n        <div className=\"p-3\">\n          <button\n            className={`bg-green-500 rounded text-white items-center p-2 ${\n              currentRow === index ? null : \"disabled opacity-0\"\n            }`}\n            onClick={() => {\n              if (currentRow !== index) {\n                return;\n              }\n              if (currentPegSelection.some((a) => a === 0)) {\n                return;\n              }\n              submittedForRow();\n            }}\n          >\n            Go!\n          </button>\n        </div>\n      </div>\n    ));\n\n  return (\n    <div className=\"max-w-screen-lg mx-auto\">\n      <div className=\"flex flex-col h-screen\">\n        <div className=\"flex-none\">\n          <div className=\"bg-gray-500\">\n            <p className=\"text-2xl text-white p-4 text-center\">Code Breaker!</p>\n          </div>\n        </div>\n        <main className=\"container flex-auto mx-auto\">\n          <div className=\"bg-gray-300 p-8 h-full\">\n            <div>{renderBoard()}</div>\n          </div>\n        </main>\n        <div className=\"flex-none\">\n          <footer className=\"flex flex-col items-center pb-4 text-white bg-gray-700 \">\n            <div className=\"flex justify-between pt-2 text-xs\">\n              <p>© 2020&nbsp;Otaiga</p>\n            </div>\n          </footer>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/styles.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}