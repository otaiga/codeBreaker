{"version":3,"sources":["support/utils.js","components/Peg.js","components/keyPegs.js","components/App.js","index.js"],"names":["colors","Peg","currentRow","rowIndex","pegIndex","handlePegColor","useState","pegColorIndex","setPegColorIndex","className","onClick","newColorIndex","length","KeyPegs","keyPegColorIndex","App","generateRandom","Math","floor","random","generateCodeToCrack","chances","setCurrentRow","currentPegSelection","setCurrentPegSelection","codeToCrack","setCodeToCrack","setKeyPegColorIndex","resetGame","colorIndex","updatedPegSelection","Array","fill","undefined","map","_val","index","some","a","JSON","stringify","alert","newRowIndex","keyPegs","alreadyMatched","i","includes","push","updatedKeyPegs","submittedForRow","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71eb384e.chunk.js","sourcesContent":["export const colors = [\n  null,\n  \"bg-red-500\",\n  \"bg-green-500\",\n  \"bg-yellow-500\",\n  \"bg-orange-500\",\n  \"bg-black\",\n  \"bg-white\",\n];\n","import { useState } from \"react\";\nimport { colors } from \"../support/utils\";\n\nconst Peg = ({ currentRow, rowIndex, pegIndex, handlePegColor }) => {\n  const [pegColorIndex, setPegColorIndex] = useState(0);\n\n  return (\n    <div\n      className={`border mx-2 border-black rounded-full ${colors[pegColorIndex]} sm:h-12 sm:w-12 h-10 w-10`}\n      onClick={() => {\n        if (currentRow !== rowIndex) {\n          return;\n        }\n        let newColorIndex = pegColorIndex + 1;\n        if (newColorIndex > colors.length - 1) {\n          newColorIndex = 1;\n        }\n        handlePegColor(pegIndex, newColorIndex);\n        setPegColorIndex(newColorIndex);\n      }}\n    ></div>\n  );\n};\n\nexport default Peg;\n","const KeyPegs = ({ keyPegColorIndex }) => {\n  /*\n    for no correct colors: 0 \"null\"\n    for a correct color but in wrong position: 1 \"bg-black\"\n    for a correct color in correct position: 2 \"bg-green-500\"\n  */\n  const colors = [null, \"bg-black\", \"bg-green-500\"];\n\n  return (\n    <div className=\"border rounded border-black p-2\">\n      <div className=\"flex\">\n        <div\n          className={`border border-black rounded-full h-2 w-2 ${\n            colors[keyPegColorIndex ? keyPegColorIndex[0] : null]\n          }`}\n        ></div>\n        <div\n          className={`border border-black rounded-full h-2 w-2 ${\n            colors[keyPegColorIndex ? keyPegColorIndex[1] : null]\n          }`}\n        ></div>\n      </div>\n      <div className=\"flex\">\n        <div\n          className={`border border-black rounded-full h-2 w-2 ${\n            colors[keyPegColorIndex ? keyPegColorIndex[2] : null]\n          }`}\n        ></div>\n        <div\n          className={`border border-black rounded-full h-2 w-2 ${\n            colors[keyPegColorIndex ? keyPegColorIndex[3] : null]\n          }`}\n        ></div>\n      </div>\n    </div>\n  );\n};\n\nexport default KeyPegs;\n","import { useState } from \"react\";\nimport { colors } from \"../support/utils\";\nimport Peg from \"./Peg\";\nimport KeyPegs from \"./keyPegs\";\n\nconst App = () => {\n  const generateRandom = () =>\n    Math.floor(Math.random() * (colors.length - 1) + 1);\n\n  const generateCodeToCrack = () => [\n    generateRandom(),\n    generateRandom(),\n    generateRandom(),\n    generateRandom(),\n  ];\n\n  const chances = 10;\n  const [currentRow, setCurrentRow] = useState(chances - 1);\n  const [currentPegSelection, setCurrentPegSelection] = useState([0, 0, 0, 0]);\n  const [codeToCrack, setCodeToCrack] = useState(generateCodeToCrack());\n  const [keyPegColorIndex, setKeyPegColorIndex] = useState([]);\n\n  const resetGame = () => {\n    setCurrentPegSelection([0, 0, 0, 0]);\n    setCodeToCrack(generateCodeToCrack());\n    setCurrentRow(chances - 1);\n    //todo reset all pegs\n  };\n\n  const submittedForRow = () => {\n    if (JSON.stringify(codeToCrack) === JSON.stringify(currentPegSelection)) {\n      alert(\"Game End! You Cracked the code!\");\n      resetGame();\n      return;\n    }\n    if (currentRow === 0) {\n      alert(\"No luck - Game End!\");\n      resetGame();\n      return;\n    }\n    const newRowIndex = currentRow - 1;\n    alert(\"No luck, try again\");\n    const keyPegs = [];\n    const alreadyMatched = [];\n    for (let i = 0; i < currentPegSelection.length; i++) {\n      if (codeToCrack[i] === currentPegSelection[i]) {\n        keyPegs.push(2);\n        alreadyMatched.push(i);\n        continue;\n      }\n      if (\n        codeToCrack.includes(currentPegSelection[i]) &&\n        !alreadyMatched.includes(i)\n      ) {\n        keyPegs.push(1);\n        alreadyMatched.push(i);\n        continue;\n      }\n      keyPegs.push(0);\n    }\n    const updatedKeyPegs = [...keyPegColorIndex];\n    updatedKeyPegs.push(keyPegs);\n    setKeyPegColorIndex(updatedKeyPegs);\n    setCurrentPegSelection([0, 0, 0, 0]);\n    setCurrentRow(newRowIndex);\n  };\n\n  const handlePegColor = (pegIndex, colorIndex) => {\n    const updatedPegSelection = [...currentPegSelection];\n    updatedPegSelection[pegIndex] = colorIndex;\n    setCurrentPegSelection(updatedPegSelection);\n  };\n\n  const renderBoard = () =>\n    new Array(chances).fill(undefined).map((_val, index) => (\n      <div key={index} className=\"flex justify-center p-2 items-center\">\n        <KeyPegs keyPegColorIndex={keyPegColorIndex[chances - 1 - index]} />\n        <div className=\"flex justify-center\">\n          <Peg\n            pegIndex={0}\n            currentRow={currentRow}\n            rowIndex={index}\n            handlePegColor={handlePegColor}\n          />\n          <Peg\n            pegIndex={1}\n            currentRow={currentRow}\n            rowIndex={index}\n            handlePegColor={handlePegColor}\n          />\n          <Peg\n            pegIndex={2}\n            currentRow={currentRow}\n            rowIndex={index}\n            handlePegColor={handlePegColor}\n          />\n          <Peg\n            pegIndex={3}\n            currentRow={currentRow}\n            rowIndex={index}\n            handlePegColor={handlePegColor}\n          />\n        </div>\n        <div className=\"p-3\">\n          {currentRow === index ? (\n            <button\n              className=\"bg-green-500 rounded text-white items-center p-2\"\n              onClick={() => {\n                if (currentPegSelection.some((a) => a === 0)) {\n                  return;\n                }\n                submittedForRow();\n              }}\n            >\n              Go\n            </button>\n          ) : null}\n        </div>\n      </div>\n    ));\n\n  return (\n    <div className=\"flex flex-col h-screen\">\n      <div className=\"flex-none\">\n        <div className=\"bg-gray-500\">\n          <p className=\"text-2xl text-white p-4 text-center\">Code Breaker!</p>\n        </div>\n      </div>\n      <div className=\"bg-gray-300 p-8 h-full\">{renderBoard()}</div>\n      <div className=\"flex-none\">\n        <footer className=\"flex flex-col items-center pb-4 text-white bg-gray-700 \">\n          <div className=\"flex justify-between pt-2 text-xs\">\n            <p>Â© 2020&nbsp;Otaiga</p>\n          </div>\n        </footer>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/styles.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}