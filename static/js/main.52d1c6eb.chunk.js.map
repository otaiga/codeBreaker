{"version":3,"sources":["support/utils.js","components/Peg.js","components/keyPegs.js","components/App.js","index.js"],"names":["colors","generateRandom","Math","floor","random","length","Peg","currentRow","rowIndex","pegIndex","handlePegColor","colorsSet","colorIndex","className","onClick","newColorIndex","KeyPegs","keyPegColorIndex","App","generateCodeToCrack","useState","chances","setCurrentRow","currentPegSelection","setCurrentPegSelection","codeToCrack","setCodeToCrack","setKeyPegColorIndex","pegColors","setPegColors","resetGame","updatedPegSelection","updatedPegColors","Array","fill","undefined","map","_val","index","some","a","JSON","stringify","alert","newRowIndex","keyPegs","alreadyMatched","i","includes","push","updatedKeyPegs","submittedForRow","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52d1c6eb.chunk.js","sourcesContent":["export const colors = [\n  null,\n  \"bg-red-500\",\n  \"bg-green-500\",\n  \"bg-yellow-500\",\n  \"bg-orange-500\",\n  \"bg-black\",\n  \"bg-white\",\n];\n\nexport const generateRandom = () =>\n  Math.floor(Math.random() * (colors.length - 1) + 1);\n","import { colors } from \"../support/utils\";\n\nconst Peg = ({ currentRow, rowIndex, pegIndex, handlePegColor, colorsSet }) => {\n  const colorIndex = colorsSet ? colorsSet[pegIndex] : 0;\n  return (\n    <div\n      className={`border mx-2 border-black rounded-full ${colors[colorIndex]} sm:h-12 sm:w-12 h-10 w-10`}\n      onClick={() => {\n        if (currentRow !== rowIndex) {\n          return;\n        }\n        let newColorIndex = colorIndex + 1;\n        if (newColorIndex > colors.length - 1) {\n          newColorIndex = 1;\n        }\n        handlePegColor(pegIndex, newColorIndex);\n      }}\n    ></div>\n  );\n};\n\nexport default Peg;\n","const KeyPegs = ({ keyPegColorIndex }) => {\n  /*\n    for no correct colors: 0 \"null\"\n    for a correct color but in wrong position: 1 \"bg-black\"\n    for a correct color in correct position: 2 \"bg-green-500\"\n  */\n  const colors = [null, \"bg-black\", \"bg-green-500\"];\n\n  return (\n    <div className=\"border rounded border-black p-2\">\n      <div className=\"flex\">\n        <div\n          className={`border border-black rounded-full h-2 w-2 ${\n            colors[keyPegColorIndex ? keyPegColorIndex[0] : null]\n          }`}\n        ></div>\n        <div\n          className={`border border-black rounded-full h-2 w-2 ${\n            colors[keyPegColorIndex ? keyPegColorIndex[1] : null]\n          }`}\n        ></div>\n      </div>\n      <div className=\"flex\">\n        <div\n          className={`border border-black rounded-full h-2 w-2 ${\n            colors[keyPegColorIndex ? keyPegColorIndex[2] : null]\n          }`}\n        ></div>\n        <div\n          className={`border border-black rounded-full h-2 w-2 ${\n            colors[keyPegColorIndex ? keyPegColorIndex[3] : null]\n          }`}\n        ></div>\n      </div>\n    </div>\n  );\n};\n\nexport default KeyPegs;\n","import { useState } from \"react\";\nimport { generateRandom } from \"../support/utils\";\nimport Peg from \"./Peg\";\nimport KeyPegs from \"./keyPegs\";\n\nconst App = () => {\n  const generateCodeToCrack = () => [\n    generateRandom(),\n    generateRandom(),\n    generateRandom(),\n    generateRandom(),\n  ];\n\n  const chances = 10;\n  const [currentRow, setCurrentRow] = useState(chances - 1);\n  const [currentPegSelection, setCurrentPegSelection] = useState([0, 0, 0, 0]);\n  const [codeToCrack, setCodeToCrack] = useState(generateCodeToCrack());\n  const [keyPegColorIndex, setKeyPegColorIndex] = useState([]);\n  const [pegColors, setPegColors] = useState([]);\n\n  const resetGame = () => {\n    setCurrentPegSelection([0, 0, 0, 0]);\n    setCodeToCrack(generateCodeToCrack());\n    setCurrentRow(chances - 1);\n    setKeyPegColorIndex([]);\n    setPegColors([]);\n  };\n\n  const submittedForRow = () => {\n    if (JSON.stringify(codeToCrack) === JSON.stringify(currentPegSelection)) {\n      alert(\"Game End! You Cracked the code!\");\n      resetGame();\n      return;\n    }\n    if (currentRow === 0) {\n      alert(\"No luck - Game End!\");\n      resetGame();\n      return;\n    }\n\n    const newRowIndex = currentRow - 1;\n    alert(\"No luck, try again\");\n    const keyPegs = [];\n    const alreadyMatched = [];\n    for (let i = 0; i < currentPegSelection.length; i++) {\n      if (codeToCrack.includes(currentPegSelection[i])) {\n        for (let index = 0; index < codeToCrack.length; index++) {\n          if (\n            codeToCrack[index] === currentPegSelection[i] &&\n            !alreadyMatched.includes(index)\n          ) {\n            keyPegs.push(1);\n            alreadyMatched.push(index);\n            break;\n          }\n        }\n      }\n      if (codeToCrack[i] === currentPegSelection[i]) {\n        keyPegs[i] = 2;\n        alreadyMatched.push(i);\n        continue;\n      }\n      keyPegs.push(0);\n    }\n    const updatedKeyPegs = [...keyPegColorIndex];\n    updatedKeyPegs.push(keyPegs);\n    setKeyPegColorIndex(updatedKeyPegs);\n    setCurrentPegSelection([0, 0, 0, 0]);\n    setCurrentRow(newRowIndex);\n  };\n\n  const handlePegColor = (pegIndex, colorIndex) => {\n    const updatedPegSelection = [...currentPegSelection];\n    const updatedPegColors = [...pegColors];\n    updatedPegSelection[pegIndex] = colorIndex;\n    updatedPegColors[currentRow] = updatedPegSelection;\n    setCurrentPegSelection(updatedPegSelection);\n    setPegColors(updatedPegColors);\n  };\n\n  const renderBoard = () =>\n    new Array(chances).fill(undefined).map((_val, index) => (\n      <div key={index} className=\"flex justify-center p-2 items-center\">\n        <KeyPegs keyPegColorIndex={keyPegColorIndex[chances - 1 - index]} />\n        <div className=\"flex justify-center\">\n          <Peg\n            pegIndex={0}\n            currentRow={currentRow}\n            rowIndex={index}\n            handlePegColor={handlePegColor}\n            colorsSet={pegColors[index]}\n          />\n          <Peg\n            pegIndex={1}\n            currentRow={currentRow}\n            rowIndex={index}\n            handlePegColor={handlePegColor}\n            colorsSet={pegColors[index]}\n          />\n          <Peg\n            pegIndex={2}\n            currentRow={currentRow}\n            rowIndex={index}\n            handlePegColor={handlePegColor}\n            colorsSet={pegColors[index]}\n          />\n          <Peg\n            pegIndex={3}\n            currentRow={currentRow}\n            rowIndex={index}\n            handlePegColor={handlePegColor}\n            colorsSet={pegColors[index]}\n          />\n        </div>\n        <div className=\"p-3\">\n          {currentRow === index ? (\n            <button\n              className=\"bg-green-500 rounded text-white items-center p-2\"\n              onClick={() => {\n                if (currentPegSelection.some((a) => a === 0)) {\n                  return;\n                }\n                submittedForRow();\n              }}\n            >\n              Go\n            </button>\n          ) : null}\n        </div>\n      </div>\n    ));\n\n  return (\n    <div className=\"max-w-screen-lg mx-auto\">\n      <div className=\"flex flex-col h-screen\">\n        <div className=\"flex-none\">\n          <div className=\"bg-gray-500\">\n            <p className=\"text-2xl text-white p-4 text-center\">Code Breaker!</p>\n          </div>\n        </div>\n        <main className=\"container flex-auto mx-auto\">\n          <div className=\"bg-gray-300 p-8 h-full\">{renderBoard()}</div>\n        </main>\n        <div className=\"flex-none\">\n          <footer className=\"flex flex-col items-center pb-4 text-white bg-gray-700 \">\n            <div className=\"flex justify-between pt-2 text-xs\">\n              <p>© 2020&nbsp;Otaiga</p>\n            </div>\n          </footer>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/styles.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}