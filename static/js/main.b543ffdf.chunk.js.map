{"version":3,"sources":["support/utils.js","components/Peg.js","components/keyPegs.js","components/Popup.js","components/App.js","index.js"],"names":["colors","generateRandom","Math","floor","random","length","Peg","currentRow","rowIndex","pegIndex","handlePegColor","colorsSet","colorIndex","className","onClick","newColorIndex","KeyPegs","keyPegColorIndex","Popup","title","message","handleOkClick","App","generateCodeToCrack","Array","fill","undefined","map","useState","chances","setCurrentRow","currentPegSelection","setCurrentPegSelection","codeToCrack","setCodeToCrack","setKeyPegColorIndex","pegColors","setPegColors","show","popup","setPopup","showCode","setShowCode","submittedForRow","JSON","stringify","reset","newRowIndex","keyPegs","clonedCodeToCrack","pegSelection","index","includes","push","calculateKeyPegs","updatedKeyPegs","updatedPegSelection","updatedPegColors","_val","i","some","a","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b543ffdf.chunk.js","sourcesContent":["export const colors = [\n  null,\n  \"bg-red-500\",\n  \"bg-green-500\",\n  \"bg-yellow-500\",\n  \"bg-orange-500\",\n  \"bg-black\",\n  \"bg-white\",\n];\n\nexport const generateRandom = () =>\n  Math.floor(Math.random() * (colors.length - 1) + 1);\n","import { colors } from \"../support/utils\";\n\nconst Peg = ({ currentRow, rowIndex, pegIndex, handlePegColor, colorsSet }) => {\n  const colorIndex = colorsSet ? colorsSet[pegIndex] : 0;\n  return (\n    <div\n      className={`border mx-2 border-black rounded-full ${colors[colorIndex]} sm:h-12 sm:w-12 h-8 w-8`}\n      onClick={() => {\n        if (currentRow !== rowIndex) {\n          return;\n        }\n        let newColorIndex = colorIndex + 1;\n        if (newColorIndex > colors.length - 1) {\n          newColorIndex = 1;\n        }\n        handlePegColor(pegIndex, newColorIndex);\n      }}\n    ></div>\n  );\n};\n\nexport default Peg;\n","const KeyPegs = ({ keyPegColorIndex }) => {\n  /*\n    for no correct colors: 0 \"null\"\n    for a correct color but in wrong position: 1 \"bg-black\"\n    for a correct color in correct position: 2 \"bg-green-500\"\n  */\n  const colors = [null, \"bg-black\", \"bg-green-500\"];\n\n  return (\n    <div className=\"border rounded border-black p-2 mr-2\">\n      <div className=\"flex\">\n        <div\n          className={`border border-black rounded-full h-2 w-2 ${\n            colors[keyPegColorIndex ? keyPegColorIndex[0] : null]\n          }`}\n        ></div>\n        <div\n          className={`border border-black rounded-full h-2 w-2 ${\n            colors[keyPegColorIndex ? keyPegColorIndex[1] : null]\n          }`}\n        ></div>\n      </div>\n      <div className=\"flex\">\n        <div\n          className={`border border-black rounded-full h-2 w-2 ${\n            colors[keyPegColorIndex ? keyPegColorIndex[2] : null]\n          }`}\n        ></div>\n        <div\n          className={`border border-black rounded-full h-2 w-2 ${\n            colors[keyPegColorIndex ? keyPegColorIndex[3] : null]\n          }`}\n        ></div>\n      </div>\n    </div>\n  );\n};\n\nexport default KeyPegs;\n","const Popup = ({ title, message, handleOkClick }) => (\n  <div>\n    <div className=\"fixed inset-0 max-w-screen-lg mx-auto bg-gray-800 opacity-75 pointer-events-none\" />\n    <div className=\"fixed inset-0 flex items-center justify-center\">\n      <div className=\"z-50 w-11/12 mx-auto overflow-y-auto bg-white rounded shadow-lg sm:max-w-sm\">\n        <div className=\"px-6 py-4 text-left modal-content\">\n          <div className=\"flex items-center justify-between pb-3\">\n            <p className=\"text-lg font-bold text-gray-900\">{title}</p>\n          </div>\n          <div className=\"py-2 text-gray-800\">{message}</div>\n          <div className=\"flex justify-end pt-2\">\n            <button\n              className={`px-4 py-1 bg-green-500 text-white rounded outline-none focus:outline-none`}\n              onClick={handleOkClick}\n            >\n              OK\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Popup;\n","import { useState } from \"react\";\nimport { generateRandom, colors } from \"../support/utils\";\nimport Peg from \"./Peg\";\nimport KeyPegs from \"./keyPegs\";\nimport Popup from \"./Popup\";\n\nconst App = () => {\n  const generateCodeToCrack = () =>\n    new Array(4).fill(undefined).map(generateRandom);\n\n  const calculateKeyPegs = () => {\n    const keyPegs = [];\n    const clonedCodeToCrack = [...codeToCrack];\n    const pegSelection = [...currentPegSelection];\n\n    for (let index = 0; index < pegSelection.length; index++) {\n      if (pegSelection[index] === clonedCodeToCrack[index]) {\n        keyPegs.push(2);\n        clonedCodeToCrack[index] = null;\n        pegSelection[index] = null;\n        continue;\n      }\n      if (pegSelection.includes(clonedCodeToCrack[index])) {\n        keyPegs.push(1);\n        clonedCodeToCrack[index] = null;\n        continue;\n      }\n    }\n    return keyPegs;\n  };\n\n  const chances = 10;\n  const [currentRow, setCurrentRow] = useState(chances - 1);\n  const [currentPegSelection, setCurrentPegSelection] = useState([0, 0, 0, 0]);\n  const [codeToCrack, setCodeToCrack] = useState(generateCodeToCrack());\n  const [keyPegColorIndex, setKeyPegColorIndex] = useState([]);\n  const [pegColors, setPegColors] = useState([]);\n  const [popup, setPopup] = useState({ show: false });\n  const [showCode, setShowCode] = useState(false);\n\n  const resetGame = () => {\n    setShowCode(false);\n    setCurrentPegSelection([0, 0, 0, 0]);\n    setCodeToCrack(generateCodeToCrack());\n    setCurrentRow(chances - 1);\n    setKeyPegColorIndex([]);\n    setPegColors([]);\n  };\n\n  const handleOkClick = () => {\n    if (popup.reset) {\n      resetGame();\n    }\n    setPopup({ show: false });\n  };\n\n  const submittedForRow = () => {\n    if (JSON.stringify(codeToCrack) === JSON.stringify(currentPegSelection)) {\n      setShowCode(true);\n      setPopup({\n        title: \"Congratulations!\",\n        message: \"You have cracked the code. Try again?\",\n        show: true,\n        reset: true,\n      });\n      return;\n    }\n    if (currentRow === 0) {\n      setShowCode(true);\n      setPopup({\n        title: \"Game End!\",\n        message: \"You have failed to crack the code. Try again?\",\n        show: true,\n        reset: true,\n      });\n      return;\n    }\n\n    const newRowIndex = currentRow - 1;\n    setPopup({\n      title: \"Incorrect!\",\n      message: \"Please try again\",\n      show: true,\n    });\n    const keyPegs = calculateKeyPegs();\n    const updatedKeyPegs = [...keyPegColorIndex];\n    updatedKeyPegs.push(keyPegs);\n    setKeyPegColorIndex(updatedKeyPegs);\n    setCurrentPegSelection([0, 0, 0, 0]);\n    setCurrentRow(newRowIndex);\n  };\n\n  const handlePegColor = (pegIndex, colorIndex) => {\n    const updatedPegSelection = [...currentPegSelection];\n    const updatedPegColors = [...pegColors];\n    updatedPegSelection[pegIndex] = colorIndex;\n    updatedPegColors[currentRow] = updatedPegSelection;\n    setCurrentPegSelection(updatedPegSelection);\n    setPegColors(updatedPegColors);\n  };\n\n  const renderBoard = () =>\n    new Array(chances).fill(undefined).map((_val, index) => (\n      <div key={index} className=\"flex items-center justify-center\">\n        <KeyPegs keyPegColorIndex={keyPegColorIndex[chances - 1 - index]} />\n        <div className=\"flex justify-center\">\n          {new Array(4).fill(undefined).map((_val, i) => (\n            <Peg\n              key={i}\n              pegIndex={i}\n              currentRow={currentRow}\n              rowIndex={index}\n              handlePegColor={handlePegColor}\n              colorsSet={pegColors[index]}\n            />\n          ))}\n        </div>\n        <div className=\"px-2 py-0 sm:py-3\">\n          <button\n            className={`bg-green-500 hover:bg-green-700 rounded text-white items-center p-2 ${\n              currentRow === index ? null : \"disabled opacity-0 cursor-default\"\n            }`}\n            onClick={() => {\n              if (currentRow !== index) {\n                return;\n              }\n              if (currentPegSelection.some((a) => a === 0)) {\n                return;\n              }\n              submittedForRow();\n            }}\n          >\n            Go!\n          </button>\n        </div>\n      </div>\n    ));\n\n  return (\n    <div className=\"max-w-screen-lg mx-auto\">\n      <div className=\"flex flex-col h-screen\">\n        <div className=\"flex-none\">\n          <div className=\"bg-gray-500\">\n            <p className=\"text-2xl text-white p-2 text-center\">Code Breaker!</p>\n          </div>\n        </div>\n        <main className=\"container flex-auto mx-auto bg-gray-300\">\n          <div className=\"p-2 sm:p-8\">\n            <div className=\"flex flex-col justify-center items-center font-bold\">\n              <p className=\"pb-2\">Crack the code</p>\n              <div className={`flex mr-5 ${showCode ? \"z-50\" : null}`}>\n                {new Array(4).fill(undefined).map((_val, index) => (\n                  <div\n                    key={index}\n                    className={`border mx-2 border-black rounded-full ${\n                      showCode ? colors[codeToCrack[index]] : \"bg-gray-500\"\n                    } sm:h-12 sm:w-12 h-8 w-8`}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-gray-300 pb-2\">\n            <div>{renderBoard()}</div>\n          </div>\n        </main>\n        <div className=\"flex-none\">\n          <footer className=\"flex flex-col items-center pb-2 text-white bg-gray-700 \">\n            <div className=\"flex justify-between pt-2 text-xs\">\n              <p>© 2020&nbsp;Otaiga</p>\n            </div>\n          </footer>\n        </div>\n      </div>\n      {popup && popup.show && (\n        <Popup\n          title={popup.title}\n          message={popup.message}\n          handleOkClick={handleOkClick}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/styles.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}